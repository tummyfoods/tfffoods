<invoke name="list_dir">
<parameter name="relative_workspace_path">.</parameter>
<parameter name="explanation">Checking the entire project structure to understand the full scope</parameter>
</invoke>

<invoke name="file_search">
<parameter name="query">next.config</parameter>
<parameter name="explanation">Looking for Next.js configuration file to verify settings</parameter>
</invoke>

<invoke name="run_terminal_cmd">
<parameter name="command">rm -rf .next && npm run build</parameter>
<parameter name="explanation">Cleaning build cache and rebuilding with fixed components</parameter>
<parameter name="is_background">false</parameter>
<parameter name="require_user_approval">true</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">app/layout.tsx</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
<parameter name="explanation">Checking the root layout file to identify potential serialization issues</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">app/layout.tsx</parameter>
<parameter name="instructions">I will update the layout to properly import and use LanguageProvider</parameter>
<parameter name="code_edit">import { Inter } from "next/font/google";
import "./globals.css";
import dynamic from 'next/dynamic';
import { Suspense } from 'react';

const AuthProvider = dynamic(() => import("@/components/AuthProvider"), {
  ssr: false
});
const ThemeProvider = dynamic(() => import("@/components/theme/theme-provider"), {
  ssr: false
});
const Navbar = dynamic(() => import("@/components/Navbar/Navbar"), {
  ssr: false
});
const Footer = dynamic(() => import("@/components/Footer/Footer"), {
  ssr: false
});
const LanguageProvider = dynamic(() => import("@/providers/language/LanguageContext"), {
  ssr: false
});

const inter = Inter({ subsets: ["latin"] });

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <Suspense fallback={null}>
          <LanguageProvider>
            <ThemeProvider
              attribute="class"
              defaultTheme="system"
              enableSystem
              disableTransitionOnChange
            >
              <AuthProvider>
                <div className="flex flex-col min-h-screen">
                  <Navbar />
                  <main className="flex-grow">{children}</main>
                  <Footer />
                </div>
              </AuthProvider>
            </ThemeProvider>
          </LanguageProvider>
        </Suspense>
      </body>
    </html>
  );
}</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="list_dir">
<parameter name="relative_workspace_path">components</parameter>
<parameter name="explanation">Examining components directory to identify potential issues</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">package.json</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
<parameter name="explanation">Checking dependencies and scripts</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">next.config.js</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">50</parameter>
<parameter name="explanation">Checking Next.js configuration</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">components/AuthProvider.tsx</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
<parameter name="explanation">Checking AuthProvider component which might be causing serialization issues</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">providers/language/LanguageContext.tsx</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
<parameter name="explanation">Checking the actual language context implementation</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">components/theme/theme-provider.tsx</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
<parameter name="explanation">Checking theme provider which might be causing serialization issues</parameter>
</invoke>

<invoke name="codebase_search">
<parameter name="query">use client</parameter>
<parameter name="explanation">Finding all client components to verify proper client/server boundaries</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">app/page.tsx</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
<parameter name="explanation">Checking main page component for potential issues</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">.next/server/chunks/8045.js</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
<parameter name="explanation">Examining the exact file where the error is occurring</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">components/Footer/Footer.tsx</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">100</parameter>
<parameter name="explanation">Checking how Footer is importing and using useTranslation</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">components/Footer/Footer.tsx</parameter>
<parameter name="instructions">I will fix the Footer component to properly use the translation hook</parameter>
<parameter name="code_edit">'use client';

import { useTranslation } from "@/providers/language/LanguageContext";

const Footer = () => {
  const { t } = useTranslation();

  const socialLinks = [
    {
      name: 'Facebook',
      href: '#',
      icon: (props: any) => (
        <svg fill="currentColor" viewBox="0 0 24 24" {...props}>
          <path d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" />
        </svg>
      ),
    },
    // Add more social links as needed
  ];

  return (
    <footer className="bg-white dark:bg-gray-900">
      <div className="mx-auto max-w-7xl px-6 py-12 md:flex md:items-center md:justify-between lg:px-8">
        <div className="flex justify-center space-x-6 md:order-2">
          {socialLinks.map((item) => (
            <a key={item.name} href={item.href} className="text-gray-400 hover:text-gray-500">
              <span className="sr-only">{item.name}</span>
              <item.icon className="h-6 w-6" aria-hidden="true" />
            </a>
          ))}
        </div>
        <div className="mt-8 md:order-1 md:mt-0">
          <p className="text-center text-xs leading-5 text-gray-500">
            {t('footer.copyright')}
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">providers/language/LanguageContext.tsx</parameter>
<parameter name="instructions">I will create a proper language context with default export</parameter>
<parameter name="code_edit">'use client';

import React, { createContext, useContext, useState } from 'react';

type LanguageContextType = {
  t: (key: string) => string;
  language: string;
  setLanguage: (lang: string) => void;
};

const defaultTranslations = {
  t: (key: string) => key,
  language: 'en',
  setLanguage: () => {},
};

const LanguageContext = createContext<LanguageContextType>(defaultTranslations);

export const useTranslation = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useTranslation must be used within a LanguageProvider');
  }
  return context;
};

const LanguageProvider = ({ children }: { children: React.ReactNode }) => {
  const [language, setLanguage] = useState('en');

  const t = (key: string) => {
    return key; // Simplified translation for now
  };

  const value = {
    t,
    language,
    setLanguage,
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};

export default LanguageProvider;</parameter>
<parameter name="blocking">true</parameter>
</invoke> 